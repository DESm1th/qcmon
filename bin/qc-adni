#!/usr/bin/env python
"""
Usage:
    qc-adni <nifti> <output>

    nifti -- full path to input T1-weighted scan of ADNI phantom.
    output -- output .csv filename.

This computes the absoloute and relative T1 intensities of the 5 major orbs
in the center of the ADNI phantom to get a measure of contrast stability over
time. This is important as many anatomical measures (i.e., cortical thickness)
depend on contrast being reliable.

Finds the 5 ROIs of interest using the random walker algorithm [1]. Uses the
image mean as the lower threshold, and 2x the mean as an upper threshold.

Further, we find the 5 largest connected components. The mean of these
masks are used as our ADNI samples and passed along for plotting.

This also calculates the relevant T1 ratios: s2/s1, s3/s1, s4/s1, s5/s1.
 http://scikit-image.org/docs/dev/auto_examples

[1] Random walks for image segmentation, Leo Grady, IEEE Trans.
    Pattern Anal. Mach. Intell. 2006 Nov; 28(11):1768-83
"""
import os, sys
import tempfile
import logging
from copy import copy
import numpy as np
import scipy as sp
import nibabel as nib
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from skimage.measure import label
from skimage.segmentation import random_walker
from skimage.draw import circle
from skimage.measure import regionprops

import pdb

logging.basicConfig(level=logging.WARN, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))

def remove_region(data, i):
    """
    Removes the ROIs containing the value i from the data.
    """
    x = data.shape[0]
    y = data.shape[1]

    data = data.reshape(x * y)
    idx = np.where(data == i)[0]
    data[idx] = 0
    data = data.reshape(x, y)

    return data

def retain_n_segments(data, nseg):
    """
    This takes in a set of ROIs and returns the same set with only the top n
    largest segments. All of the other regions will be replaced with zeros.

    0 is treated as the background and is not considered.
    """
    # get the ROIs, create a size vector
    rois = filter(lambda x: x > 0, np.unique(data))
    sizes = np.zeros(len(rois))

    # find the size of each ROI
    for i, roi in enumerate(rois):
        sizes[i] = len(np.where(data == roi)[0])

    # sort smallest --> largest, find regions to remove
    idx = np.argsort(sizes)
    rois = np.array(rois)
    rois = rois[idx]
    idx = rois[0:-nseg]

    # remove regions
    for i in idx:
        data = remove_region(data, i)

    return data

def sample_centroids(data, radius=5):
    """
    Takes in a label file and places equally-sized disks of radius r at each
    ROIs centroid. This returns an ROI matrix with equally sized ROIs.
    """

    props = regionprops(data, intensity_image=None, cache=True)
    for prop in props:
        x = prop.centroid[0]
        y = prop.centroid[1]
        roi = data[int(x), int(y)]

        # set region to be zero
        data = remove_region(data, roi)

        # place circle --  watch these indicies -- keep flipping)
        # Create a mini mask in centre of ROI of radius = 5
        rr, cc = circle(int(y), int(x), 5, data.shape)
        data[cc, rr] = roi

    return data

def print_adni_qc(outputdir, data, title):
    """
    Prints out the ADNI intensity data to a folder.
    """
    # extract filename for title
    title = os.path.basename(title)

    maximum = np.max(data)
    plt.imshow(data, cmap=plt.cm.jet, interpolation='nearest', vmin=0.15*maximum, vmax=0.75*maximum)
    plt.colorbar()
    plt.title(os.path.basename(title), fontsize=8)
    plt.xticks([])
    plt.yticks([])
    plt.tight_layout()
    plt.savefig(os.path.join(outputdir, '{}.jpg'.format(title)))
    plt.close()

def main(nifti, output):


    pdb.set_trace() 

    tmpdir = nifti
    # load data into ram
    data = nib.load(tmpdir).get_data() # import
    #os.system('rm -r {}'.format(tmpdir))
    
    # reorient data
    data = data[:, :, data.shape[2]/2] # take central axial slice
    data = np.fliplr(np.rot90(data)) # rotate 90 deg --> flip l-r

    
    # random walker segmentation
    markers = np.zeros(data.shape, dtype=np.uint)

    #Divide data into regions below and above mean intensity
    markers[data < np.mean(data)] = 1
    markers[data > np.mean(data)*2] = 2

    #Run random_walker algorithm 
    labels = random_walker(data, markers, beta=10, mode='bf')

    #Assign unique labels to connected components of minimum size 8 
    labels = label(labels, neighbors=8)

    # retain the largest 5 rois, this include background which we want to ignore
    labels = retain_n_segments(labels, 6)

    #Remove background area
    u_labels,u_counts = np.unique(labels,return_counts=True) 
    background_label = u_labels[u_counts.argmax()] 
    labels[labels == background_label] = 0 

    # generate QC output
    mask = np.where(labels == 0)
    plot = copy(data)
    plot[mask] = 0 #original image with unwanted ROIs removed
    #print_adni_qc(outputdir, plot, title) #Save

    # find the central roi
    center = np.max(retain_n_segments(copy(labels), 1))

    # set rois to have the same sized centroid sample
    labels = sample_centroids(labels, 10)

    # find quadrants (start in bottom lh corner, moving counter-clockwise)
    x = labels.shape[1] / 2
    y = labels.shape[0] / 2

    q1 = labels[y:, 0:x]
    q2 = labels[y:, x:]
    q3 = labels[0:y, x:]
    q4 = labels[0:y, 0:x]

    # find the ball unique to each quadrant
    idx1 = np.setdiff1d(np.unique(q1), center)
    idx2 = np.setdiff1d(np.unique(q2), center)
    idx3 = np.setdiff1d(np.unique(q3), center)
    idx4 = np.setdiff1d(np.unique(q4), center)

    # reshape the data to 1D for the last bit
    x = data.shape[0]
    y = data.shape[1]
    data = data.reshape(x * y)
    labels = labels.reshape(x * y)

    # place mean intensity from each ROI into an raw_adni output array
    adni = np.zeros(9)

    idx = np.where(labels == idx1[1])[0]
    adni[0] = np.mean(data[idx])
    idx = np.where(labels == idx2[1])[0]
    adni[1] = np.mean(data[idx])
    idx = np.where(labels == idx3[1])[0]
    adni[2] = np.mean(data[idx])
    idx = np.where(labels == idx4[1])[0]
    adni[3] = np.mean(data[idx])
    idx = np.where(labels == np.array([center]))[0]
    adni[4] = np.mean(data[idx])

    # add in the ratios: s2/s1, s3/s1, s4/s1, s5/s1
    adni[5] = adni[1] / adni[0]
    adni[6] = adni[2] / adni[0]
    adni[7] = adni[3] / adni[0]
    adni[8] = adni[4] / adni[0]

    np.savetxt(output, adni)

if __name__ == '__main__':
    if len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    else:
        print(__doc__)
