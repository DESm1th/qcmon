#!/usr/bin/env python
"""
Creates a montage of images displaying a label set on top of a grayscale image.
Also, hates on minc montage.

Usage: 
    epi-nifti-montage [options] <image> <label>

Arguments:
    <image>      background image file name
    <label>      label set file name

Options:
    --alpha      opacity of overlay (1 = full, 0 = none) [default: 0.75]
    --steps      number of images in the montage [default: 10]
    --ori        orientation: 'coronal', 'saggital', 'axial'. [default: coronal]
"""

import sys
import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt
from scipy import ndimage as nd
from epitome.docopt import docopt

def bounding_box(filename):
    """
    Finds a box that only includes all nonzero voxels in a 3D image. Output box
    is represented as 3 x 2 numpy array with rows denoting x, y, z, and columns
    denoting stand and end slices.

    Usage:
        box = bounding_box(filename)
    """

    # find 3D bounding box
    box = np.zeros((3,2))  # init bounding box
    flag = 0  # switch to ascending

    for i, dim in enumerate(filename.shape): # loop through (x, y, z)

        # ascending search
        while flag == 0:
            for dim_test in np.arange(dim):

                # get sum of all values in each slice
                if i == 0:
                    test = np.sum(filename[dim_test, :, :])
                elif i == 1:
                    test = np.sum(filename[:, dim_test, :])
                elif i == 2:
                    test = np.sum(filename[:, :, dim_test])

                if test >= 1:  # if slice is nonzero, set starting bound
                    box[i, 0] = dim_test
                    flag = 1  # switch to descending
                    break  # get us out of this nested nonsense

        # descending search
        while flag == 1:
            for dim_test in np.arange(dim):
                
                dim_test = dim-dim_test - 1  # we have to reverse things

                # get sum of all values in each slice
                if i == 0:
                    test = np.sum(filename[dim_test, :, :])
                elif i == 1:
                    test = np.sum(filename[:, dim_test, :])
                elif i == 2:
                    test = np.sum(filename[:, :, dim_test])

                if test >= 1:  # if slice is nonzero, set ending bound
                    box[i, 1] = dim_test
                    flag = 0  # switch to ascending 
                    break  # get us out of this nested nonsense

    return box

def main():
    arguments = docopt(__doc__)
    image     = arguments['<image>']
    label     = arguments['<label>']
    alpha     = arguments['--alpha']
    steps     = arguments['--steps']
    ori       = arguments['--ori']

    if ori not in ['coronal', 'axial', 'saggital']:
        print('ERROR: Invalid orientation. Valid: coronal, axial, saggital.') 
        sys.exit()

    # load in the daterbytes
    output = str(label)
    image = nib.load(image).get_data()
    label = nib.load(label).get_data()

    # reorient the data to radiological (does this generalize?)
    image = np.transpose(image, (2,0,1))
    image = np.rot90(image, 2)
    label = np.transpose(label, (2,0,1))
    label = np.rot90(label, 2)

    # get size ratio between over + underlay, and set to match
    dsfactor = [a/float(r) for a,r in zip(image.shape, label.shape)]
    label = nd.interpolation.zoom(label, zoom=dsfactor)

    # if box == None: # if we didn't get a submitted bounding box
    box = bounding_box(label) # get the label bounds
    # elif box.shape != (3,2): # if we did, ensure it is the right shape
    #     print('*** Submitted bounding box is not the correct shape! ***')
    #     print('***     It should be (3,2).                          ***')
    #     raise ValueError

    # crop data to bounded size
    image = image[box[0,0]:box[0,1], box[1,0]:box[1,1], box[2,0]:box[2,1]]
    label = label[box[0,0]:box[0,1], box[1,0]:box[1,1], box[2,0]:box[2,1]]

    label = np.ma.masked_where(label < 1, label) # small values transparent
    
    step = 0
    cmap = plt.cm.BrBG  # the colormap (needs to be different)
    cmap.set_bad('g', 0)  # value for transparent pixels in the overlay 

    # determine the step size
    if ori == 'axial':
        stepsize = np.floor((box[0,1] - box[0,0]) / (steps-1))
    elif ori == 'saggital':
        stepsize = np.floor((box[1,1] - box[1,0]) / (steps-1))
    elif ori == 'coronal':
        stepsize = np.floor((box[2,1] - box[2,0]) / (steps-1))

    # init the figure, looping through each step
    fig, ax = plt.subplots(nrows=1, ncols=steps, facecolor='white')
    for x in np.arange(steps):
        if ori == 'axial':
            ax[x].imshow(image[step, :, :], cmap=plt.cm.gray,
                                            interpolation='nearest')
            ax[x].imshow(label[step, :, :], cmap=cmap, 
                                            alpha=alpha,
                                            interpolation='nearest')
        elif ori == 'saggital':
            ax[x].imshow(image[:, step, :], cmap=plt.cm.gray,
                                            interpolation='nearest')
            ax[x].imshow(label[:, step, :], cmap=cmap, 
                                            alpha=alpha,
                                            interpolation='nearest')
        elif ori == 'coronal':
            ax[x].imshow(image[:, :, step], cmap=plt.cm.gray,
                                            interpolation='nearest')
            ax[x].imshow(label[:, :, step], cmap=cmap, 
                                            alpha=alpha,
                                            interpolation='nearest')

        ax[x].set_frame_on(False)  # clean up unnecessary detail
        ax[x].axes.get_xaxis().set_visible(False)
        ax[x].axes.get_yaxis().set_visible(False)

        step = step + stepsize  # iterate through the steps

    fig.tight_layout()
    plt.savefig(output + '_montage.pdf', format='pdf')

if __name__ == "__main__":
    main()
